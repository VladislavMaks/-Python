# 1) Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv

name, hours, rate, prize = argv
hours, rate, prize = float(hours), float(rate), float(prize)


def salary(hours, rate, prize):
    return hours * rate + prize


print(salary(hours, rate, prize))

# 2) Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего
# элемента. # Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка
# использовать генератор # Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]. # Результат:
# [12, 44, 4, 10, 78, 123].

defolt_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
res_list = [item for id, item in enumerate(defolt_list) if defolt_list[id] > defolt_list[id - 1] and id > 0]

# res_list = []
# for id, item in enumerate(defolt_list):
#     if defolt_list[id] > defolt_list[id - 1] and id > 0:
#         res_list.append(item)

print(res_list)

# 4) Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел,
# соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания
# обязательно использовать генератор. Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

numb_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
res_list = [item for item in numb_list if numb_list.count(item) < 2]

# for item in numb_list:
#     if numb_list.count(item) < 2:
#         res_list.append(item)

print(res_list)

# 5) Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce()

from functools import reduce

even_numb = [item for item in range(100, 1001) if item % 2 == 0]


def multipl_numb(num_1, num_2):
    return num_2 * num_1


print(reduce(multipl_numb, even_numb))

# 6) Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл
# не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

from sys import argv
from itertools import count
from itertools import cycle

# А
name, start, finish = argv
start, finish = float(start), float(finish)


def iteg_num_gen(start, finish):
    for item in count(start):
        if item > finish:
            break
        else:
            print(item)


iteg_num_gen(start, finish)

# Б
some_list = ['Мария', 'Иван', 'Женя', 'Катя', 'Роберт', 'Кувшин']
stop = 0
for item in cycle(some_list):
    if stop > 15:
        break
    else:
        print(item)
    stop += 1

# 7)  Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом:
# for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить
# только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from math import factorial

n = int(input('Введите число n: '))


def fact(n):
    for item in range(1, n + 1):
        yield factorial(item)


for el in fact(n):
    print(el)
